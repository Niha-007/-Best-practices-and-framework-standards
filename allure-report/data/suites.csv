"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting locked out user test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(process.env.lockedUser, process.env.commonPassword);
    yield askui_helper_1.aui.waitUntil(
      askui_helper_1.aui
        .expect()
        .text(test_data_1.testData.lockedUserError)
        .exists()
    );
    yield askui_helper_1.aui.annotate();
    logger_1.logger.success(
      ""Successfully verified locked out user cannot login""
    );
  });

```
","12","Locked out user should not be able to login","C:","Tue Nov 19 10:27:10 CET 2024","skipped","Tue Nov 19 10:27:10 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > purchase-test-error-user.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting locked out user test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(process.env.lockedUser, process.env.commonPassword);
    yield askui_helper_1.aui.waitUntil(
      askui_helper_1.aui
        .expect()
        .text(test_data_1.testData.lockedUserError)
        .exists()
    );
    yield askui_helper_1.aui.annotate();
    logger_1.logger.success(
      ""Successfully verified locked out user cannot login""
    );
  });

```
","21","Locked out user should not be able to login","C:","Tue Nov 19 10:27:09 CET 2024","skipped","Tue Nov 19 10:27:09 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > purchase-standard-problem-user.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting problem user purchase flow test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(
      test_data_1.testData.credentials.glitchUserr.username,
      test_data_1.testData.credentials.glitchUserr.password
    );
    logger_1.logger.success("" user login successful"");
    yield inventoryPage.completeProductSelection(
      test_data_1.testData.productName
    );
    logger_1.logger.success(""Product selection completed for problem user"");
    yield checkoutPage.fillShippingDetails(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.clickContinue();
    yield checkoutPage.clickFinish();
    logger_1.logger.success(""performance glitch user purchase flow completed"");
  });

```
","142","Error user should attempt to complete purchase with error handling","C:","Sun Nov 17 22:46:37 CET 2024","skipped","Sun Nov 17 22:46:37 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > folder_example > folder-2.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting problem user purchase flow test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(process.env.glitchUser, process.env.commonPassword);
    logger_1.logger.success("" user login successful"");
    yield inventoryPage.completeProductSelection(
      test_data_1.testData.productName
    );
    logger_1.logger.success(""Product selection completed for problem user"");
    yield checkoutPage.fillShippingDetails(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.clickContinue();
    yield checkoutPage.clickFinish();
    logger_1.logger.success(""performance glitch user purchase flow completed"");
  });

```
","34934","glitch user should attempt to complete purchase with error handling","C:","Tue Nov 19 10:25:27 CET 2024","broken","Tue Nov 19 10:26:02 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > folder_example > folder-2.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting standard user purchase flow test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(
      process.env.standardusername,
      process.env.commonpassword
    );
    logger_1.logger.success(""Standard user login successful"");
    yield inventoryPage.completeProductSelection(
      test_data_1.testData.productName
    );
    logger_1.logger.success(""Product selection completed"");
    yield checkoutPage.fillShippingDetails(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.clickContinue();
    yield checkoutPage.clickFinish();
    logger_1.logger.success(""Purchase flow completed successfully"");
  });

```
","80451","Standard user should complete purchase successfully","C:","Wed Nov 20 17:14:59 CET 2024","passed","Wed Nov 20 17:16:19 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > purchase-standard-problem-user.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting locked out user test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(
      process.env.lockedUserName,
      process.env.commonPassword
    );
    yield askui_helper_1.aui.annotate();
    yield askui_helper_1.aui.waitUntil(
      askui_helper_1.aui
        .expect()
        .text(test_data_1.testData.lockedUserError)
        .exists()
    );
    yield askui_helper_1.aui.annotate();
    logger_1.logger.success(
      ""Successfully verified locked out user cannot login""
    );
  });

```
","23546","Locked out user should not be able to login","C:","Thu Nov 21 07:58:45 CET 2024","passed","Thu Nov 21 07:59:08 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > purchase-test-locked-user.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting problem user purchase flow test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(process.env.problemUser, process.env.commonPassword);
    logger_1.logger.success(""Problem user login successful"");
    yield inventoryPage.completeProductSelection(
      test_data_1.testData.productName
    );
    logger_1.logger.success(""Product selection completed for problem user"");
    yield checkoutPage.fillShippingDetails(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.clickContinue();
    yield checkoutPage.clickFinish();
    logger_1.logger.success(""Problem user purchase flow completed"");
  });

```
","37171","Problem user should attempt to complete purchase with error handling","C:","Wed Nov 20 17:16:19 CET 2024","broken","Wed Nov 20 17:16:56 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > purchase-standard-problem-user.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    yield askui_helper_1.aui.click();
    // <INSERT YOUR COPIED ELEMENT DESCRIPTION HERE AND UNCOMMENT THIS AND THE NEXT LINE>
    // .exec();
  });

```
","16","should click on my element","C:","Wed Nov 20 17:19:27 CET 2024","skipped","Wed Nov 20 17:19:27 CET 2024","jest with askui","Users > 91957 > saucedemo_project > askui_example > my-first-askui-test-suite.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting problem user purchase flow test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(process.env.errorUser, process.env.commonPassword);
    logger_1.logger.success(""error user login successful"");
    yield inventoryPage.completeProductSelection(
      test_data_1.testData.productName
    );
    logger_1.logger.success(""Product selection completed for error user"");
    yield checkoutPage.fillShippingDetails(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.clickContinue();
    yield checkoutPage.clickFinish();
    logger_1.logger.success(""error user purchase flow completed"");
  });

```
","59474","Error user should attempt to complete purchase with error handling","C:","Tue Nov 19 10:26:07 CET 2024","passed","Tue Nov 19 10:27:06 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > folder_example > folder-1.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting problem user purchase flow test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(process.env.glitchUser, process.env.commonPassword);
    logger_1.logger.success("" user login successful"");
    yield inventoryPage.completeProductSelection(
      test_data_1.testData.productName
    );
    logger_1.logger.success(""Product selection completed for problem user"");
    yield checkoutPage.fillShippingDetails(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.verifyEnteredValues(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.clickContinue();
    yield checkoutPage.clickFinish();
    logger_1.logger.success(""performance glitch user purchase flow completed"");
  });

```
","91238","glitch user should attempt to complete purchase with error handling","C:","Thu Nov 21 08:32:43 CET 2024","passed","Thu Nov 21 08:34:15 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > folder_example > purchase-performance-glitch-user.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger.info(""Starting problem user purchase flow test"");
    yield loginPage.navigateToSite();
    yield loginPage.login(process.env.errorUser, process.env.commonPassword);
    logger_1.logger.success(""error user login successful"");
    yield inventoryPage.completeProductSelection(
      test_data_1.testData.productName
    );
    logger_1.logger.success(""Product selection completed for error user"");
    yield checkoutPage.fillShippingDetails(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.verifyEnteredValues(
      test_data_1.testData.checkoutInfo.firstName,
      test_data_1.testData.checkoutInfo.lastName,
      test_data_1.testData.checkoutInfo.postalCode
    );
    yield checkoutPage.clickContinue();
    yield checkoutPage.clickFinish();
    logger_1.logger.success(""error user purchase flow completed"");
  });

```
","60436","Error user should attempt to complete purchase with error handling","C:","Thu Nov 21 08:31:13 CET 2024","broken","Thu Nov 21 08:32:13 CET 2024","Sauce Demo Purchase Flow Tests","Users > 91957 > saucedemo_project > askui_example > folder_example > purchase-error-user.test.ts","",""
"
### Test
```typescript
() =>
  __awaiter(void 0, void 0, void 0, function* () {
    // For Windows users:
    // Use annotate() to create an annotated HTML file
    // of your screen that is saved under <project_root>/report
    yield askui_helper_1.aui.annotate();
    // Uncomment for macOS and Linux
    // Delete the lines above to not trigger annotate()
    // await aui.annotateInteractively();
  });

```
","32","should generate an (interactive) annotation","C:","Wed Nov 20 17:19:27 CET 2024","skipped","Wed Nov 20 17:19:27 CET 2024","jest with askui","Users > 91957 > saucedemo_project > askui_example > my-first-askui-test-suite.test.ts","",""
